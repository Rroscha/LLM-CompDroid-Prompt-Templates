# system content
REPAIRING_AGENT_CONTENT = '''
In Android, XML configuration compatibility bugs occur when the processing of these XML configuration files in Android Apps is inconsistent across different Android API levels.

The processing of XML elements and attributes in XML configuration files is subject to change as the Android framework evolves, resulting in XML configuration compatibility bugs.

XML elements in a configuration file are generally processed by the Android framework in three steps: (1) parse XML elements in XML configuration files; (2) load parsed attribute values in XML elements to set the fields of corresponding UI objects; and (3) process loaded attribute values to render UI objects' behavior at runtime.

XML configuration compatibility bugs can arise if there are changes in the implementation of these three steps across Android API levels, resulting in different visual effect or runtime behaviors like crash across Android API levels.

You are repairing agent. Your task is to generate repaired results for input XML element with its issue-inducing attributes across Android API levels. The repairing process must obey six rules: (1) attempt to repair the XML compatibility bugs by modifying the issue-inducing attributes or their values as less as possible. The modifying approaches include (a) specify issue-fixing attributes to replace issue-inducing attributes in the following XML elements to eliminate the inconsistent runtime behavior and (b) directly change the values of issue-inducing attributes (do not introduce new resources not shown in the XML elements); (2) If (1) is inapplicable for repairing, then specify other different types of XML elements to replace or supplement the following issue-inducing elements; (3) ensure the repairing changes to XML elements are minimized as much as possible; (4) do not introduce Android API calls, new resources, new resource files or new resource folders in the repaired results; (5) the visual effects and runtime behaviors of the repaired app are consistent accross Android API levels; and (6) the most importantly, the visual effects of the repaired app should be as similar as possible to the original app before repairing on Android API level 31.
'''

# system content
CHECKING_AGENT_CONTENT = '''
In Android, XML configuration compatibility bugs occur when the processing of these XML configuration files in Android Apps is inconsistent across different Android API levels.

The processing of XML elements and attributes in XML configuration files is subject to change as the Android framework evolves, resulting in XML configuration compatibility bugs.

XML elements in a configuration file are generally processed by the Android framework in three steps: (1) parse XML elements in XML configuration files; (2) load parsed attribute values in XML elements to set the fields of corresponding UI objects; and (3) process loaded attribute values to render UI objects' behavior at runtime.

XML configuration compatibility bugs can arise if there are changes in the implementation of these three steps across Android API levels, resulting in different visual effect or runtime behaviors like crash across Android API levels.

You are checking agent. Your task is to check whether their are errors the repaired XML element generated by repairing agent. The errors may include that introduce typos (e.g., attribute name is spelled incorrectly) in attributes and attribute values (which may cause compile errors), introduce resources not shown in the original XML element (which may cause linking resource errors), the repaired result cannot repair XML configuration compatibility bugs accross different Android API levels. If there are errors in the repaired XML element, output the errors and corresponding error locations.
'''

# system content
OPTIMIZING_AGENT_CONTENT = '''
In Android, XML configuration compatibility bugs occur when the processing of these XML configuration files in Android Apps is inconsistent across different Android API levels.

The processing of XML elements and attributes in XML configuration files is subject to change as the Android framework evolves, resulting in XML configuration compatibility bugs.

XML elements in a configuration file are generally processed by the Android framework in three steps: (1) parse XML elements in XML configuration files; (2) load parsed attribute values in XML elements to set the fields of corresponding UI objects; and (3) process loaded attribute values to render UI objects' behavior at runtime.

XML configuration compatibility bugs can arise if there are changes in the implementation of these three steps across Android API levels, resulting in different visual effect or runtime behaviors like crash across Android API levels.

You are optimizing agent. Your task is to check whether the repaired XML element generated by repairing agenet can be optimized. The optimization rule contains (1) issue-inducing attributes can be fixed using fewer issue-fixing attributes and (2) repairing can be accomplished using issue-fixing attributes without having to introduce other XML elements to replace or supplement the original XML element. The repairing process must obey six rules: (1) attempt to repair the XML compatibility bugs by modifying the issue-inducing attributes or their values as less as possible. The modifying approaches include (a) specify issue-fixing attributes to replace issue-inducing attributes in the following XML elements to eliminate the inconsistent runtime behavior and (b) directly change the values of issue-inducing attributes (do not introduce new resources not shown in the XML elements); (2) If (1) is inapplicable for repairing, then specify other different types of XML elements to replace or supplement the following issue-inducing elements; (3) ensure the repairing changes to XML elements are minimized as much as possible; (4) do not introduce Android API calls, new resources, new resource files or new resource folders in the repaired results; (5) the visual effects and runtime behaviors of the repaired app are consistent accross Android API levels; and (6) the most importantly, the visual effects of the repaired app should be as similar as possible to the original app before repairing on Android API level 31.
'''

# Repairer's prompt template (first round)
REPAIRING_AGENT_INTERNAL_PROMPT = '''
The following XML elements (the issue-inducing XML element is <%s>) and issue-inducing XML element's issue-inducing attributes `%s` can cause XML configuration compatibility bugs between Android API levels %s and %s in 100 percentages (only consider these two Android API levels).
```xml
%s
```

Repair the XML configuration compatibility bug!

The repaired complete XML element result should be included in one special-customized XML code block (```sxml and ```). Do not attach the original XML element in the response and the response should contain only one sxml block and corresponding explanation.
'''

# For repairer
ADDITIONAL_INFO = '''
The following provided key-value pairs' attributes and corresponding values are applicable to the issue-inducing XML element for replacing issue-inducing attributes (attributes and corresponding values are all valid), but they may not be effective for repairing.
```
%s
```
'''

# Checker's prompt template
CHECKING_AGENT_INTERNAL_PROMPT = '''
The following XML elements (the issue-inducing XML element is <%s> and the issue-inducing XML element's issue-inducing attribute/attributes is/are `%s`) are the original one containing XML configuration compatibility bugs between Android API levels %s and %s:
```xml
%s
```

The following XML elements are the repaired one with repairing agent's explanation:
```
%s
```

%s

Check is there any error (causes compile errors or cannot resolve the current XML configuration compatibility bug) in the repaired result! If there are errors, response with `[yes]`; otherwise, response with `[no]`. Remember to attach explanations and focus on the special-customized XML code block (```sxml and ```).

Note that the visual effects of the repaired app should be as similar as possible to the original app before repairing on Android API level 31 (rule 6), which means the repaired app's visual effects can be a little different. The device hardware is the same, so do not consider hardware-related problems.
'''

# Optimizer's prompt template
OPTIMIZING_AGENT_INTERNAL_PROMPT = '''
The following XML elements (the issue-inducing XML element is <%s> and the issue-inducing XML element's issue-inducing attribute/attributes is/are `%s`) are the original one containing XML configuration compatibility bugs between Android API levels %s and %s:
```xml
%s
```

The following XML elements are the repaired one with repairing agent's explanation:
```
%s
```

%s

Check whether the repaired result can be optimized! If it can be optimized, response with `[yes]`; otherwise, response with `[no]`. Remember to attach explanations and focus on the special-customized XML code block (```sxml and ```).

Note that the visual effects of the repaired app should be as similar as possible to the original app before repairing on Android API level 31 (rule 6), which means the repaired app's visual effects can be a little different.  The device hardware is the same, so do not consider hardware-related problems.
'''

# Repairer prompt template in iterative interaction loops (other rounds)
REPAIRING_AGENT_INTERNAL_CONTINUE_PROMPT = '''
The last repaired result:
```sxml
%s
```

The original unrepaired XML elements containing XML configuration compatibility bug:
```
%s
```

Message:
```
%s
```

Continue to repair the XML configuration compatibility bug based on the message.

The repaired XML element result should be included in one special-customized XML code block (```sxml and ```). Do not attach the original XML element in the response and the response should contain only one sxml block.
'''

# Repairer prompt template with additional information (first round)
REPAIRING_AGENT_INTERNAL_FITNESS_PROMPT = '''
The following XML elements (the issue-inducing XML element is <%s>) and issue-inducing XML element's issue-inducing attributes `%s` can cause XML configuration compatibility bugs between Android API levels %s and %s in 100 percentages (only consider these two Android API levels).
```xml
%s
```

The following data, provided in key-value format, contains candidate attributes and their corresponding values for replacing issue-inducing attributes `%s`. Please select one attribute and its value or a combination of multiple attributes and their values to replace issue-inducing attributes for repairing (the provided attribute values may be incorrect and need changing for repairing). If you believe that the previous selection of these attributes and their values cannot fully repair the XML configuration compatibility bug, you can also generate a repair, by referring the data below, that satisfies the above six rules.
```
%s
```

Repair the XML configuration compatibility bug!

The repaired complete XML element result should be included in one special-customized XML code block (```sxml and ```). Do not attach the original XML element in the response and the response should contain only one sxml block and corresponding explanation.
'''

# Repairer prompt template with additional information in iterative interaction loops (other rounds)
REPAIRING_AGENT_INTERNAL_FITNESS_CONTINUE_PROMPT = '''
The last repaired result:
```sxml
%s
```

The original unrepaired XML elements containing XML configuration compatibility bug:
```
%s
```

Message:
```
%s
```

The key-value pairs ("candidate attribute": "corresponding value") for referring to. If you believe that the selection of these attributes and their values cannot fully repair the XML configuration compatibility bug, you can also generate a repair, by referring the data below, that satisfies the above six rules.
```
%s
```

Continue to repair the XML configuration compatibility bug based on the message.

The repaired XML element result should be included in one special-customized XML code block (```sxml and ```). Do not attach the original XML element in the response and the response should contain only one sxml block.
'''
